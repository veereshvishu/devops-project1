#!/bin/bash
set -euxo pipefail # Exit on error, print commands

echo "Starting K8s Master Node Setup..."

# --- [1] System Update and Prerequisites ---
export DEBIAN_FRONTEND=noninteractive
apt-get update
apt-get install -y apt-transport-https ca-certificates curl gpg socat ebtables ethtool

# --- [2] Disable Swap ---
echo "Disabling swap..."
swapoff -a
# Disable swap permanently
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# --- [3] Configure Kernel Modules & Sysctl ---
echo "Configuring kernel modules and sysctl..."
cat <<EOF | tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sysctl --system

# --- [4] Install containerd Runtime ---
echo "Installing containerd..."
# Install containerd
apt-get install -y containerd

# Configure containerd
mkdir -p /etc/containerd
containerd config default | tee /etc/containerd/config.toml
# Set systemd as the cgroup driver
sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

# Restart containerd service
systemctl restart containerd
systemctl enable containerd

# --- [5] Install Kubernetes Components (kubeadm, kubelet, kubectl) ---
echo "Installing Kubernetes components..."

# Define Kubernetes version (Update if needed)
K8S_VERSION="1.30"

# Add Kubernetes GPG key (new method for pkgs.k8s.io)
mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL "https://pkgs.k8s.io/core:/stable:/v${K8S_VERSION}/deb/Release.key" | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Add Kubernetes apt repository
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v${K8S_VERSION}/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list

# Update apt package index and install components
apt-get update
apt-get install -y kubelet kubeadm kubectl
# Mark packages to hold their version
apt-mark hold kubelet kubeadm kubectl

# Enable and start kubelet
systemctl enable --now kubelet

# --- [6] Initialize Kubernetes Cluster ---
echo "Initializing Kubernetes cluster with kubeadm..."

# Pull required images beforehand
kubeadm config images pull

# Initialize the cluster (using Calico's default Pod CIDR)
# Automatically detect the primary IP address for the advertise address
IP_ADDR=$(hostname -I | awk '{print $1}')
POD_CIDR="192.168.0.0/16" # Default for Calico CNI
kubeadm init --pod-network-cidr=${POD_CIDR} --apiserver-advertise-address=${IP_ADDR} --upload-certs

# --- [7] Configure kubectl for 'ubuntu' user ---
echo "Configuring kubectl for the ubuntu user..."
mkdir -p /home/ubuntu/.kube
cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
chown ubuntu:ubuntu /home/ubuntu/.kube/config

# Set KUBECONFIG for root user for immediate use in this script
export KUBECONFIG=/etc/kubernetes/admin.conf

# --- [8] Install Calico CNI ---
echo "Installing Calico CNI..."
# Make sure KUBECONFIG is set for the kubectl command run by root
# Use the recommended Calico manifest URL from their documentation
CALICO_VERSION="v3.28.0" # Check Project Calico website for the latest stable version
kubectl apply -f "https://raw.githubusercontent.com/projectcalico/calico/${CALICO_VERSION}/manifests/calico.yaml"

# Allow scheduling pods on the control-plane node (optional, for single-node setup or testing)
# kubectl taint nodes --all node-role.kubernetes.io/control-plane-

# --- [9] Generate and Save Join Command ---
echo "Saving join command to /tmp/kubeadm_join_command.sh..."
kubeadm token create --print-join-command > /tmp/kubeadm_join_command.sh
chmod +x /tmp/kubeadm_join_command.sh

echo "Kubernetes Master Node setup complete!"
echo "The join command for worker nodes is saved in /tmp/kubeadm_join_command.sh on this node."
echo "You can log in as the 'ubuntu' user and start using kubectl."